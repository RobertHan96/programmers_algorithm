# 무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다.
# 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.

# 예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면
# 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.

# 구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.
# 사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때,
# 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.

# 제한사항
# 무인도에 갇힌 사람은 1명 이상 50,000명 이하입니다.
# 각 사람의 몸무게는 40kg 이상 240kg 이하입니다.
# 구명보트의 무게 제한은 40kg 이상 240kg 이하입니다.
# 구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.

people = [80, 70, 50]


def solution(people, limit):
    people.sort()
    light = 0
    heavy = len(people)-1
    count = 0
    # 가벼운 사람이 무거운 사람의 인덱스값보다 높으면 배열 전체를 다 순회한 것이므로 아래와 같이 while 조건문 사용
    while(light < heavy):
        if people[light]+people[heavy] <= limit:
            # 가장 가벼운 사람과 무거운 사람의 합이 무게제한보다 적은 경우, 
            # 무거운 사람의 위치는 -1 하고, 가벼운 사람의 위치는 +1해서 배열 전체를 검사할 수 있도록함
            count += 1
            light += 1
            heavy -= 1
        else:
            # 조건문을 돌때마다 보트의 개수를 늘리는 것이 아니고, 배열의 길이만큼 보트가 있다고 가정하고,
            # 두명 이상이 한보트에 탄경우만 구한다음 전체 배열 길이에서 빼면 더 간단하게 문제 해결 가능
            heavy -= 1
    return len(people)-count


print(solution(people, 100))
